#!/bin/bash

# Version: 3.1

VERSION="3"
PID=$$
INITPARAM=$1

UUID=$(uuidgen); DATE=$(date '+%d.%m.%Y'); TIME=$(date '+%H:%M:%S'); LOGDATE=$(date +%F_%T)

BASEPATH="/server/cron/script/kragt/teamspeak-master"
LOGFILE="$BASEPATH/watchdog-teamspeak-master.log"
WORKFILE="$BASEPATH/workfile.$PID.tmp"
SERVICEFAILURE="$BASEPATH/service_failure.tmp"
FAILURECOUNT="$BASEPATH/failure_count.tmp"

MAXCOUNT='3'

MAILTO="ck@kragt.pro,watchdog@kragt.pro"; MAILFROM=""

__checkServer () {
    local INSTANCE="1"; local SERVER="ts.kragt.pro"; local PORT="XXXXX"; local USER="serveradmin"; local PASS="XXXXXXXXXXXXXX"

    touch $WORKFILE
    echo -e "use $INSTANCE\nlogin $USER $PASS\nserverlist -uid 1\nquit" | nc $SERVER $PORT | tr -d "\r" > $WORKFILE

    if grep -q virtualserver_status=online $WORKFILE
    then
        if [ -f $SERVICEFAILURE ]
        then
            rm $SERVICEFAILURE; rm $FAILURECOUNT; rm $WORKFILE
            echo "WATCHDOG;$UUID;$DATE;$TIME;RECOVERED;the service has recovered from previous failure;" >> $LOGFILE
            __invokeMail "atchdog: service has recovered" "The service <ts.kragt.pro> has recovered from previous failure.\n\nThis is an automatically generated email. Please do not reply.\nMail generated by elara.tech.kragt.pro"
            exit 0
        else
            rm $WORKFILE
            echo "WATCHDOG;$UUID;$DATE;$TIME;OK;service online;" >> $LOGFILE
            exit 0
        fi
    elif grep -q banned $WORKFILE
    then
        if [ -f $FAILURECOUNT ]
        then
            CURRENTCOUNT=$(cat $FAILURECOUNT)
            if [[ $CURRENTCOUNT -lt $MAXCOUNT ]]
            then
                #message
                echo "WATCHDOG;$UUID;$DATE;$TIME;ERROR;the watchdog got banned ($CURRENTCOUNT of $MAXCOUNT);" >> $LOGFILE
                CURRENTCOUNT=$((CURRENTCOUNT + 1))
                rm $WORKFILE; rm $FAILURECOUNT; touch $SERVICEFAILURE
                echo $CURRENTCOUNT > $FAILURECOUNT
                __invokeMail "Watchdog: banned" "The watchdog got banned from querying <ts.kragt.pro>.\nThis is message $CURRENTCOUNT of a maximum of $MAXCOUNT.\n\nThis is an automatically generated email. Please do not reply to this email.\nMail generated by elara.tech.kragt.pro"
            else
                #watchdog banned, but no message
                rm $WORKFILE
                echo "WATCHDOG;$UUID;$DATE;$TIME;ERROR;the watchdog got banned;" >> $LOGFILE
                exit 0
            fi
        else
            touch $FAILURECOUNT; echo "1" > $FAILURECOUNT; rm $WORKFILE; touch $SERVICEFAILURE
            echo "WATCHDOG;$UUID;$DATE;$TIME;ERROR;te watchdog got banned (1 of $MAXCOUNT);" >> $LOGFILE
            __invokeMail "Watchdog: banned" "The watchdog got banned from querying <ts.kragt.pro>.\nYou will receive this mail for a maximum of $MAXCOUNT times. After this limit, or if the service got unbanned, you will receive a recovery email.\n\nThis is an automatically generated email. Please do not reply to this email.\nMail generated by elara.tech.kragt.pro"
        fi
    else
        if [ -f $FAILURECOUNT ]
        then
            CURRENTCOUNT=$(cat $FAILURECOUNT)
            if [[ $CURRENTCOUNT -lt $MAXCOUNT ]]
            then
                #message
                echo "WATCHDOG;$UUID;$DATE;$TIME;ERROR;service offline ($CURRENTCOUNT of $MAXCOUNT);" >> $LOGFILE
                CURRENTCOUNT=$((CURRENTCOUNT +1 ))
                rm $WORKFILE; rm $FAILURECOUNT; touch $FAILURECOUNT
                echo $CURRENTCOUNT > $FAILURECOUNT
                __invokeMail "Watchdog: service failure" "The service <ts.kragt.pro> didn't respond. Probably it's down.\nThis is message $CURRENTCOUNT of a maximum of $MAXCOUNT.\n\nThis is an automatically generated email. Please do not reply to this email.\nMail generated by elara.tech.kragt.pro"
            else
                #service failure, but no message
                rm $WORKFILE
                echo "WATCHDOG;$UUID;$DATE;$TIME;ERROR;service offline;" >> $LOGFILE
                exit 0
            fi
         else
            touch $FAILURECOUNT; echo "1" > $FAILURECOUNT; rm $WORKFILE; touch $SERVICEFAILURE
            echo "WATCHDOG;$UUID;$DATE;$TIME;ERROR;service offline (1 of $MAXCOUNT);" >> $LOGFILE
            __invokeMail "Watchdog: service failure" "The service <ts.kragt.pro> didn't respond. Probably it's down.\nYou will receive this mail for a maximum of $MAXCOUNT times. After this limit, or if the service recovers, you will receive a recovery email.\n\nThis is an automatically generated email. Please do not reply to this email.\nMail generated by elara.tech.kragt.pro"
        fi
    fi
}

__invokeMail () {
    SUBJECT=$1; BODY=$2

    echo -e "$BODY" | mail -s "$SUBJECT" -a "Reply-to: cron@kragt.pro" "$MAILTO"
    echo "MAIL;$UUID;$DATE;$TIME;INFO;notification sent;" >> $LOGFILE
    exit 0
}

__checkMailer () {
    SUBJECT="Watchdog: Checking MailerSubsystem"
    BODY="This is just a weekly test. We are checking the MailerSubsystem.\nYou can delete this mail.\n\nThis is an automatically generated email. Please do not reply to this email.\nMail generated by elara.tech.kragt.pro"

    echo -e "$BODY" | mail -s "$SUBJECT" -a "Reply-to: cron@kragt.pro" "$MAILTO"
    echo "MAIL;$UUID;$DATE;$TIME;INFO;testmail sent;" >> $LOGFILE
    exit 0
}

__sendReport () {
    SUBJECT="Watchdog: monthly service report"
    BODY="This is the monthly service report for <ts.kragt.pro>. See attached file for more informations. Also, the log rotated for the current month.\n\nThis is an automatically generated email. Please do not reply to this email."
    FILE="watchdog-teamspeak-master.log"

    echo "REPORT;$UUID;$DATE;$TIME;INFO;report generated and sent;" >> $LOGFILE
    echo "REPORT;$UUID;$DATE;$TIME;INFO;logrotation started;" >> $LOGFILE
    echo "# Log closed: $LOGDATE" >> $LOGFILE
    echo -e "$BODY" | mail -s "$SUBJECT" -a "Reply-to: cron@kragt.pro" "$MAILTO" -A "$LOGFILE"
    mv $LOGFILE $LOGFILE.$LOGDATE
    echo "# Log started: $LOGDATE" >> $LOGFILE
    echo "SYSTEM;UUID;DATE;TIME;LEVEL;DESCRIPTION;" >> $LOGFILE
    echo "REPORT;$UUID;$DATE;$TIME;INFO;logrotation complete;" >> $LOGFILE
    exit 0
}

__deleteLog () {
    rm $LOGFILE
    echo "# Log started: $LOGDATE" >> $LOGFILE
    echo "SYSTEM;UUID;DATE;TIME;LEVEL;DESCRIPTION;" >> $LOGFILE
    exit 0
}

if [[ "$INITPARAM" == "check-mailer" ]]
then
    __checkMailer
elif [[ "$INITPARAM" == "report" ]]
then
    __sendReport
elif [[ "$INITPARAM" == "delete-log" ]]
then
    __deleteLog
else
    __checkServer
fi
